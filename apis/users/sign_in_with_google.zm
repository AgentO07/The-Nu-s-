// sign in with google. Create account if not exists
BUCKET = "bucket"
fs = _ds["storage"]
payload = json(req.body())

_log.info('Calling google API to verify token')

/// Verifying google token - https://stackoverflow.com/a/24646356/8801881
google_oauth = _ds.google_oauth
resp = google_oauth.send('GET', '/tokeninfo', {:}, {'id_token': payload.id_token}, '')
_log.info('Token verification error: {} response: {}', resp.error, resp.value)
panic(resp.inError, resp.error)

_log.info('Validating token')
/// If response is not 200, we do not know what is the error
panic(resp.value.status != 200, '{"error": "server_error", "message": "Could not verify token"}')

body = json(resp.value.body)
error = body.error ?? ''
panic(error == 'invalid_token', '{"error": "invalid_token", "message": "Google validation failed"}', 403)

/// make sure token is issued by google https://developers.google.com/identity/gsi/web/guides/verify-google-id-token
valid_issuers = set('https://accounts.google.com', 'accounts.google.com')
assert(body.iss @ valid_issuers, '{"error": "invalid_token", "message": "Issuer incorrect"}', 403)

/// I got this value by running calling tokeninfo myself. This basically ensures token was issued
/// for our app
assert(body.aud == '546428075367-kp9t7ebso81nr3913ecqm1rppco6h7rn.apps.googleusercontent.com', '{"error": "invalid_token", "message": "Audience incorrect"}', 403)

expiry_time = int(time()) / 1000
panic(body.exp <= expiry_time, '{"error": "invalid_token": "message": "token expired"}')

_log.info('Token validated')

mapping = fs.loads(BUCKET, 'mapping/' + body.email)
/// if user already exists, issue token and return
if (!empty(mapping)) {
    _log.info('Mapping exists. Returning token')

    token = _ds['ds:auth'].jwt({'sub': mapping}).token
    return jstr({"uid": mapping, 'token': token})
}

_log.info('Mapping does not exist. Creating user')

import java.util.UUID as uuid

urn = str(uuid.randomUUID)

_log.info('Creating user with urn: {}', urn)

profile = {
    'urn': urn, 'email': body.email, 'profile_pic': body.picture,
    'name': body.given_name + ' ' + body.family_name
}

success = fs.dump(BUCKET, 'users/' + urn + '/profile.json', profile)
assert( success, '{"error": "server_error", "message": "Could not create profile"}')

success = fs.dumps(BUCKET, 'mapping/' + body.email, urn)
assert( success, '{"error": "server_error", "message": "Could not create mapping"}')

token = _ds['ds:auth'].jwt({'sub': urn}).token
return jstr({"uid": urn, 'token': token})
